
//
//  OpenGLView.m
//  MyTest
//
//  Created by smy on 12/20/11.
//  Copyright (c) 2011 ZY.SYM. All rights reserved.
//

#import "OpenGLView20.h"
#import "OpenGLView20+Render.h"

enum AttribEnum {
    ATTRIB_VERTEX,
    ATTRIB_TEXTURE,
};

enum TextureType {
    TEXY = 0,
    TEXU,
    TEXV,
};


@implementation OpenGLView20

- (void)dealloc{
    [self destoryYUVTexture];
    [self destoryFrameAndRenderBuffer];
}

- (BOOL)doInit{
    CAEAGLLayer *eaglLayer = (CAEAGLLayer *)self.layer;
    eaglLayer.opaque = YES;
    eaglLayer.drawableProperties = @{
        kEAGLDrawablePropertyRetainedBacking : @(NO),
        kEAGLDrawablePropertyColorFormat : kEAGLColorFormatRGBA8
    };
    _viewScale = [UIScreen mainScreen].scale;
    self.contentScaleFactor = _viewScale;

    _glContext = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
        
    if(![EAGLContext setCurrentContext:_glContext]){
        return NO;
    }
    
    [self genYUVTexture];
    [self loadShader];
    glUseProgram(_program);
    
    GLuint textureUniformY = glGetUniformLocation(_program, "SamplerY");
    GLuint textureUniformU = glGetUniformLocation(_program, "SamplerU");
    GLuint textureUniformV = glGetUniformLocation(_program, "SamplerV");
    glUniform1i(textureUniformY, 0);
    glUniform1i(textureUniformU, 1);
    glUniform1i(textureUniformV, 2);
    
    return YES;
}

+ (Class)layerClass {
    return [CAEAGLLayer class];
}

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super initWithCoder:aDecoder];
    [self doInit];
    return self;
}

- (id)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    [self doInit];
    return self;
}

- (instancetype)init{
    self = [super init];
    [self doInit];
    return self;
}

- (void)genYUVTexture{
    [self destoryYUVTexture];
    glGenTextures(3, _textureYUV);
    if (!_textureYUV[TEXY] || !_textureYUV[TEXU] || !_textureYUV[TEXV]) {
        NSLog(@"glGenTextures failed");
        return;
    }
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, _textureYUV[TEXY]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, _textureYUV[TEXU]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    
    glActiveTexture(GL_TEXTURE2);
    glBindTexture(GL_TEXTURE_2D, _textureYUV[TEXV]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
}

- (void)destoryYUVTexture{
    if (_textureYUV[TEXY]){
        glDeleteTextures(3, _textureYUV);
    }
}

#pragma mark - 设置openGL

- (BOOL)createFrameAndRenderBuffer:(CAEAGLLayer *)layer{
    glGenFramebuffers(1, &_framebuffer);
    glGenRenderbuffers(1, &_renderBuffer);
    
    glBindFramebuffer(GL_FRAMEBUFFER, _framebuffer);
    glBindRenderbuffer(GL_RENDERBUFFER, _renderBuffer);
    
    if (![_glContext renderbufferStorage:GL_RENDERBUFFER fromDrawable:layer]) {
        NSLog(@"attach渲染缓冲区失败");
    }
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, _renderBuffer);
    if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE) {
        NSLog(@"创建缓冲区错误 0x%x", glCheckFramebufferStatus(GL_FRAMEBUFFER));
        return NO;
    }
    return YES;
}

- (void)destoryFrameAndRenderBuffer{
    if (_framebuffer){
        glDeleteFramebuffers(1, &_framebuffer);
    }
    if (_renderBuffer){
        glDeleteRenderbuffers(1, &_renderBuffer);
    }
    _framebuffer = 0;
    _renderBuffer = 0;
}

/**
 加载着色器
 */
- (void)loadShader{
    //1
    GLuint vertexShader = [self compileShader:@"Vsh.glsl" withType:GL_VERTEX_SHADER];
    GLuint fragmentShader = [self compileShader:@"Fsh.glsl" withType:GL_FRAGMENT_SHADER];
    //2
    _program = glCreateProgram();
    glAttachShader(_program, vertexShader);
    glAttachShader(_program, fragmentShader);
    //3
    glBindAttribLocation(_program, ATTRIB_VERTEX, "position");
    glBindAttribLocation(_program, ATTRIB_TEXTURE, "TexCoordIn");
    glLinkProgram(_program);
    //4
    GLint linkSuccess;
    glGetProgramiv(_program, GL_LINK_STATUS, &linkSuccess);
    if (linkSuccess == GL_FALSE) {
        GLchar messages[256];
        glGetProgramInfoLog(_program, sizeof(messages), 0, &messages[0]);
        NSString *messageString = [NSString stringWithUTF8String:messages];
        NSLog(@"<<<<着色器连接失败 %@>>>", messageString);
    }
    if (vertexShader) {
        glDeleteShader(vertexShader);
    }
    if (fragmentShader){
        glDeleteShader(fragmentShader);
    }
}

- (GLuint)compileShader:(NSString *)shaderName withType:(GLenum)shaderType{
    NSString *shaderPath = [NSBundle.mainBundle pathForResource:shaderName ofType:nil];
    NSString *shaderString = [NSString stringWithContentsOfFile:shaderPath encoding:NSUTF8StringEncoding error:nil];
    //1
    GLuint shaderHandle = glCreateShader(shaderType);
    //2
    const char *shaderStringUTF8 = [shaderString UTF8String];
    int shaderStringLength = (int)[shaderString length];
    glShaderSource(shaderHandle, 1, &shaderStringUTF8, &shaderStringLength);
    //3
    glCompileShader(shaderHandle);
    //4
    GLint compileSuccess;
    glGetShaderiv(shaderHandle, GL_COMPILE_STATUS, &compileSuccess);
    if (compileSuccess == GL_FALSE) {
        GLchar messages[256];
        glGetShaderInfoLog(shaderHandle, sizeof(messages), 0, &messages[0]);
        NSString *messageString = [NSString stringWithUTF8String:messages];
        NSLog(@"%@", messageString);
    }
    return shaderHandle;
}

#pragma mark - 接口
- (void)displayYUV420pData:(uint8_t *)data width:(GLsizei)w height:(GLsizei)h{
    if (!self.window){
        return;
    }
    @synchronized(self){
        if ([self needResizeViedoSizeWithWidth:w height:h]){
            [self setVideoSize:w height:h];
        }
        [EAGLContext setCurrentContext:_glContext];
        [self fillImageWithWidth:w height:h data:data];
        [self render];
    }
    
#ifdef DEBUG
    GLenum err = glGetError();
    if (err != GL_NO_ERROR){
        printf("GL_ERROR=======>%d\n", err);
    }
    struct timeval nowtime;
    gettimeofday(&nowtime, NULL);
    if (nowtime.tv_sec != _time.tv_sec){
        printf("帧率:   %td\n", _frameRate);
        memcpy(&_time, &nowtime, sizeof(struct timeval));
        _frameRate = 0;
    }else{
        _frameRate++;
    }
#endif
}

- (void)layoutSubviews {
    CAEAGLLayer *layer = (CAEAGLLayer *)self.layer;
    CGRect glViewRect = [self glViewRect];
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        @synchronized(self)
        {
            [EAGLContext setCurrentContext:self->_glContext];
            [self destoryFrameAndRenderBuffer];
            [self createFrameAndRenderBuffer:layer];
        }
        glViewport(glViewRect.origin.x, glViewRect.origin.y, glViewRect.size.width, glViewRect.size.height);
    });
}

- (void)render{
    [EAGLContext setCurrentContext:_glContext];
    
    CGRect glViewRect = [self glViewRect];
    glViewport(glViewRect.origin.x, glViewRect.origin.y, glViewRect.size.width, glViewRect.size.height);
    
    static const GLfloat squareVertices[] = {
        -1.0f, -1.0f,
        1.0f, -1.0f,
        -1.0f,  1.0f,
        1.0f,  1.0f,
    };

    static const GLfloat coordVertices[] = {
        0.0f, 1.0f,
        1.0f, 1.0f,
        0.0f, 0.0f,
        1.0f, 0.0f,
    };

    // Update attribute values
    glVertexAttribPointer(ATTRIB_VERTEX, 2, GL_FLOAT, 0, 0, squareVertices);
    glEnableVertexAttribArray(ATTRIB_VERTEX);
    
    glVertexAttribPointer(ATTRIB_TEXTURE, 2, GL_FLOAT, 0, 0, coordVertices);
    glEnableVertexAttribArray(ATTRIB_TEXTURE);
    
    // Draw
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindRenderbuffer(GL_RENDERBUFFER, _renderBuffer);
    [_glContext presentRenderbuffer:GL_RENDERBUFFER];
}

- (BOOL)needResizeViedoSizeWithWidth:(GLsizei)width height:(GLsizei)height{
    return (_videoW != width) || (_videoH != height);
}

- (void)setVideoSize:(GLsizei)width height:(GLsizei)height{
    GLuint size = width * height * 1.5;
    uint8_t *blackData = (uint8_t *)fok_malloc(size);
    [EAGLContext setCurrentContext:_glContext];
    [self fillImageWithWidth:width height:height data:blackData];
    free(blackData);
    _videoW = width;
    _videoH = height;
}

- (void)fillImageWithWidth:(GLsizei)width height:(GLsizei)height data:(uint8_t *)data{
    if (!data) {
        return;
    }
    size_t sampleSize[3] = {0}; int sampleWidth[3] = {0}; int sampleHeight[3] = {0};
    av_yuv_data_get_size(sampleSize, sampleWidth, sampleHeight, width, height);
    //luma
    glBindTexture(GL_TEXTURE_2D, _textureYUV[TEXY]);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RED_EXT, sampleWidth[0], sampleHeight[0], 0, GL_RED_EXT, GL_UNSIGNED_BYTE, data);
    //chromaB
    glBindTexture(GL_TEXTURE_2D, _textureYUV[TEXU]);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RED_EXT, sampleWidth[1], sampleHeight[1], 0, GL_RED_EXT, GL_UNSIGNED_BYTE, data + sampleSize[0]);
    //chromaR
    glBindTexture(GL_TEXTURE_2D, _textureYUV[TEXV]);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RED_EXT, sampleWidth[2], sampleHeight[2], 0, GL_RED_EXT, GL_UNSIGNED_BYTE, data + (sampleSize[0] + sampleSize[1]));
}


- (void)clearFrame {
    if (!self.window) {
        return;
    }
    [EAGLContext setCurrentContext:_glContext];
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glBindRenderbuffer(GL_RENDERBUFFER, _renderBuffer);
    [_glContext presentRenderbuffer:GL_RENDERBUFFER];
}

@end

